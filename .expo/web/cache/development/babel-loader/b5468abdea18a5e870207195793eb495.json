{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\umair\\\\Downloads\\\\New folder (3)\\\\react\\\\react-native\\\\openid\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { usestate } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { GoogleSignin, GoogleSigninButton, statusCodes } from '@react-native-google-signin/google-signin';\nGoogleSignin.configure({\n  webClientId: '844866902004-u6e4blme1c8c1th8fk6ne0kbn52chqvb.apps.googleusercontent.com',\n  offlineAccess: true\n});\n\nvar _useState = useState({}),\n    _useState2 = _slicedToArray(_useState, 2),\n    userGoogleinfo = _useState2[0],\n    setuserGoogleinfo = _useState2[1];\n\nvar _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loaded = _useState4[0],\n    setloaded = _useState4[1];\n\nvar signin = function signin() {\n  var userInfo;\n  return _regeneratorRuntime.async(function signin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(GoogleSignin.hasPlayServices());\n\n        case 3:\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(GoogleSignin.signIn());\n\n        case 5:\n          userInfo = _context.sent;\n          setuserGoogleinfo(userInfo);\n          setloaded(true);\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nexport default function App() {\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, React.createElement(GoogleSigninButton, {\n    onPress: signin,\n    size: GoogleSigninButton.Size.Wide,\n    color: GoogleSigninButton.Color.Dark,\n    style: {\n      width: 100,\n      height: 100\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }), loaded ? React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, userGoogleinfo.user.name, \" \"), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, userGoogleinfo.user.email, \" \"), React.createElement(Image, {\n    style: {\n      width: '100',\n      height: '100'\n    },\n    source: {\n      uri: userGoogleinfo.user.photo\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  })) : React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \" Not Signed\"));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/umair/Downloads/New folder (3)/react/react-native/openid/App.js"],"names":["StatusBar","React","usestate","GoogleSignin","GoogleSigninButton","statusCodes","configure","webClientId","offlineAccess","useState","userGoogleinfo","setuserGoogleinfo","loaded","setloaded","signin","hasPlayServices","signIn","userInfo","console","log","App","styles","container","Size","Wide","Color","Dark","width","height","user","name","email","uri","photo","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;AAEA,SACEC,YADF,EAEEC,kBAFF,EAGEC,WAHF,QAIO,2CAJP;AAKAF,YAAY,CAACG,SAAb,CAAuB;AACrBC,EAAAA,WAAW,EAAC,0EADS;AAErBC,EAAAA,aAAa,EAAC;AAFO,CAAvB;;AAIA,gBAA4CC,QAAQ,CAAC,EAAD,CAApD;AAAA;AAAA,IAAOC,cAAP;AAAA,IAAuBC,iBAAvB;;AACA,iBAA4BF,QAAQ,CAAC,KAAD,CAApC;AAAA;AAAA,IAAOG,MAAP;AAAA,IAAeC,SAAf;;AAEA,IAAMC,MAAM,GAAC,SAAPA,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEHX,YAAY,CAACY,eAAb,EAFG;;AAAA;AAAA;AAAA,2CAGYZ,YAAY,CAACa,MAAb,EAHZ;;AAAA;AAGLC,UAAAA,QAHK;AAIXN,UAAAA,iBAAiB,CAACM,QAAD,CAAjB;AACAJ,UAAAA,SAAS,CAAC,IAAD,CAAT;AALW;AAAA;;AAAA;AAAA;AAAA;AAOTK,UAAAA,OAAO,CAACC,GAAR;;AAPS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAb;;AAYA,eAAe,SAASC,GAAT,GAAe;AAC5B,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,kBAAD;AACA,IAAA,OAAO,EAAER,MADT;AAEA,IAAA,IAAI,EAAEV,kBAAkB,CAACmB,IAAnB,CAAwBC,IAF9B;AAGA,IAAA,KAAK,EAAEpB,kBAAkB,CAACqB,KAAnB,CAAyBC,IAHhC;AAIA,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAC,GAAP;AAAWC,MAAAA,MAAM,EAAC;AAAlB,KAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGhB,MAAM,GACP,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,cAAc,CAACmB,IAAf,CAAoBC,IAA3B,MADA,EAEA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOpB,cAAc,CAACmB,IAAf,CAAoBE,KAA3B,MAFA,EAGA,oBAAC,KAAD;AACA,IAAA,KAAK,EAAE;AAACJ,MAAAA,KAAK,EAAC,KAAP;AAAaC,MAAAA,MAAM,EAAC;AAApB,KADP;AAEA,IAAA,MAAM,EAAE;AAACI,MAAAA,GAAG,EAACtB,cAAc,CAACmB,IAAf,CAAoBI;AAAzB,KAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,CADO,GAWL,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAlBJ,CADF;AAsBD;AAED,IAAMZ,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC/Bb,EAAAA,SAAS,EAAE;AACTc,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {usestate} from 'react';\nimport { StyleSheet, Text, View,Image } from 'react-native';\nimport {\n  GoogleSignin,\n  GoogleSigninButton,\n  statusCodes,\n} from '@react-native-google-signin/google-signin';\nGoogleSignin.configure({\n  webClientId:'844866902004-u6e4blme1c8c1th8fk6ne0kbn52chqvb.apps.googleusercontent.com',\n  offlineAccess:true,\n})\nconst [userGoogleinfo, setuserGoogleinfo] = useState({})\nconst [loaded, setloaded] = useState(false)\n\nconst signin=async ()=>{\n  try {\n    await GoogleSignin.hasPlayServices()\n  const userInfo = await GoogleSignin.signIn();\n  setuserGoogleinfo(userInfo)\n  setloaded(true)\n  } catch (error) {\n    console.log(error)\n  }\n \n}\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <GoogleSigninButton\n      onPress={signin}\n      size={GoogleSigninButton.Size.Wide}\n      color={GoogleSigninButton.Color.Dark}\n      style={{width:100,height:100}}\n      />\n      {loaded ?\n      <View>\n      <Text>{userGoogleinfo.user.name} </Text>\n      <Text>{userGoogleinfo.user.email} </Text>\n      <Image\n      style={{width:'100',height:'100'}}\n      source={{uri:userGoogleinfo.user.photo}}\n      />\n          </View>\n      \n      \n      : <Text> Not Signed</Text>}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}